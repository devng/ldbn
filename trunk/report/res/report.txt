Abstract
--------------------------------------------------------------------------------

Database normalization is a technique for designing relational database tables 
to minimize duplication of information in order to safeguard the database 
against certain types of logical or structural problems, namely data anomalies. 
Therefore database normalization is a central topic in database theory, and its 
correct understanding is crucial for students. The subject it is often 
considered to be dry and purely theoretical and it is widely being disregarded 
by the students. A web-based tool is developed to give students an interactive 
hands-on experience in database normalization process, and to provide lecturers 
with an easy way for creating and testing student assignments on the subject.  
The tool is suitable for relational database and design and data management 
courses. This paper describes the web-based tool and the approach to creating a 
web based application and the problems that lies within this kind of software 
development. The paper also provides a tutorial on the right usage of the tool.   

Keywords: Database Normalization, Relational Data Model, Functional Dependency, 
Third Normal Form, Boyce-Codd Normal Form, Embedded Functional Dependencies


1. Introduction
--------------------------------------------------------------------------------
Readers unfamiliar with the terms of relational database normalization and 
functional dependencies can find a brief introduction on the subject in the beginning of
chapter two. 

Due to its great importance for database applications, database schema design has
attracted a lot of researchers [1]. Relational database normalization is a 
theoretical approach for organizing data in a database and it is very well developed [8].
Unfortunately, however, theory does not have much impact on practice yet [1]. 
Theoretical investigations have accumulated many formal
notations knows as normal forms, which ensure low storage cost and low update cost
for databases.
Algorithms for synthesize a normalized database into a certain normal using 
functional dependencies (FDs) are widely know 
and are well covered in student literature such textbooks by Elmasri [11], 
Kemper [12], Abiteboul [13] and Silberschatz [14].
Such algorithm rely on the definition of normal forms. In order to find a right 
solution, they often first compute the canonical cover by removing extraneous 
attributes of functional dependencies (FDs) and then to convert each FD in the 
canonical cover to a relation/table. For convenience we will refer to such algorithms as
decomposition algorithms. However, such algorithms have the 
disadvantage of possible decomposition of a schema, which is already satisfying 
a certain normal form, into a new set of relations/tables [4]. Thus we can observe 
another issue related with normal forms, which is the fact, that there can be many 
possible, distinct decomposition of the same schema, which all satisfy the same 
normal form [14]. 
This is a key aspect of the relational database normalization, because it directly 
affects our tool in a such way, that we cannot simply take a decomposition given 
by a user and compare it with the one, provided by the decomposition algorithms. 
We rather need algorithms for testing, if a given relational schema is violating 
certain normal form. We are going to focus on Second Normal From (2NF), 
Third Normal Form (3NF) and Boyce-Codd Normal Form (BCNF). For convenience we 
will refer to this algorithms as 2NFTEST, 3NFTEST and BCNFTEST. Such algorithms 
are necessary, but are not as widely covered in student literature as the 
decomposition algorithms. From four leading textbooks on the subject of 
databases, which were mention above, only the one of Silberschatz [14]
is describing the problem and is providing algorithms for solving it. Thus students 
are often required to understand relational database normalization only on the 
simple definition of the normal forms [8] and on the definitions of such decomposition
algorithms. This according to Kung [8], may not be the best way to help many 
IS/IT students effectively understand the database normalization process. Therefore
our tool has the goal to provide the students with an easy way to test themselves
in practice by giving them a way to decompose a relation schema, and test if a 
decomposition is correct. 

Here it is worth mentioning, that the normalization algorithms often require 
extensive relational algebraic backgrounds that most IS/IT students lack [8]. This
is also an issue which our tool is trying to overcome by providing more intuitive 
way of decomposing a schema and by providing an easy way to lecturers to
teach by example and test the knowledge of their students. 

Altought there are a couple of other web-based database normalization tools 
available such as "Web-based Tool to Enhance Teaching/Learning Database 
Normalization" by Kung [8] and "The Database Normalization Tool" [15], 
we will outline in the next section why we think our tool is better and more efficient
in terms of teaching potential. We will also disguise possible reasons why the 
other tools are not commonly used by students. 


1.1. The Web-based Normalization Tool
--------------------------------------------------------------------------------
In this section we are going to informally outline the key features and consepsts of our 
Web-based Normalization Tool, which is called LDBN (Lean DataBase Normalization) and
it can be fond at ldbnonline.com [16] . The outline here is important for the reader,
in order to understand the need of the algorithms described in section two, which
on the other side are important for the discussion of the implementation of the tool
in section tree, where a more detailed description of LDBN is provided. 

image//: overview

In the illustration {which number}, one can see the "Solve assignment" tab, which 
is the most important part of LDBN. The first thing the reader may notice is the 
fact, that LDBN is running within a browser. The client side of LDBN is written 
in JavaScript following the AJAX techniques (more about this in chapter tree). 
Also LDBN is assignment driven. This means students have to choose an assignemtn 
form a list with assignments, submitted by other users. 

image//: assignment list


Furthermore an assignment consists of a relational schema in First Normal Form (1NF), 
i.e., all the attributes in a single relation and a set of FDs on the attributes. The 
students then have to use the user interface (UI) to define the other normal forms, 
but also key attributes and a minimal cover of the given FDs. This is one major 
difference between LDBN and the other tools [8] [15], which only show only one 
solution to the user, without users having the ability to test themselves, or 
for instance, lectures to test a student handwritten solution using the tool. 
Another major advantage of LDBN over the other tools is the user-friendly UI. 
As Frye [10] and Dantin [17] stated, this is often 
neglected feature, when it comes to educational software and therefore a 
lot of the educational software suffers from unpopularity among students because of
the lack of user-friendly UI. An a example here could be "The Database 
Normalization Tool" [15] and the "Web-based Tool to Enhance Teaching/Learning Database 
Normalization" by Kung [8], where inputing a relational schema in the program 
takes quite sometime due to the fact, that
user have to input every attribute manually using the keyboard and then also 
have to input every FD the same way, which may take several minutes even for small 
assignments. Furthermore relational schemas cannot be saved for future use like 
in LDBN, and user have to input them again. To overcome this slow input of user data, 
LDBN supports Drag and Drop, a feature widely used in desktop
applications, but relatively new to the AJAX application such as LDBN. Every attribute
and every FD in LDBN can be dragged and dropped, in order 
to define or modify FDs, key attributes, etc... This ensures a really fast and easy
usage of the tool without the need to use the keyboard. It should be mentioned,
that inputing attributes the traditional way by tipping them is also supported.

When the user is done with the done with the decomposition, he/she can check his 
solution by clicking on the "Ceck Solution" button. After that the program will
perform series of checks, which are disguised in detail in chapter two and tree.
Then the user is shown a dialog with the result, and in case of an error, small hints
where the error might be. Such dialog is shown in illustration ???. In this case
we can see, that the user has made some errors //describe the error.



Additional features of the tool include creating an assignment, this can be done 
only by registered users. This condition is necessary, in order users to be able 
to distinct assignemtn provided from trusted users such as their database course
lecturers. Registered users have also the ability to leave comments for every assignment.
This will entire on the one hand, that user can easily communicate and share ideas
with each other, and one the other hand could also decrease the amount of workload
for the lecturers in terms of giving an explanation of difficult decomposition.
Such community features are not present in the other [8] [15] web-based 
normalization tools.

More detailed overview of the features of the tool will be given in the next two
chapters. 

   


           
 








// not here but rather in section algorithms.
Here it is worth mentioning.
that more efficient algorithms for 3NFTEST and BCNFTEST were introduced by Mannila [3] 
and by Gottlob [4]. Altought these tests are knowing to be NP-complete[2], Gottlob [4] has 
shown, that in a large number of cases the tests can be done in polynomial time.  

 

